'use strict';

var _templateObject;
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
var sanity = require('sanity');
var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var styled = require('styled-components');
var ui = require('@sanity/ui');
function _interopDefaultCompat(e) {
  return e && typeof e === 'object' && 'default' in e ? e : {
    default: e
  };
}
var styled__default = /*#__PURE__*/_interopDefaultCompat(styled);
const MarkdownInputStyles = styled__default.default(ui.Box)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  & .CodeMirror.CodeMirror {\n    color: ", ";\n    border-color: ", ";\n    background-color: inherit;\n  }\n\n  & .cm-s-easymde .CodeMirror-cursor {\n    border-color: ", ";\n  }\n\n  & .editor-toolbar,\n  .editor-preview-side {\n    border-color: ", ";\n  }\n\n  & .CodeMirror-focused .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {\n    background-color: ", ";\n  }\n\n  & .CodeMirror-selected.CodeMirror-selected.CodeMirror-selected {\n    background-color: ", ";\n  }\n\n  & .editor-toolbar > * {\n    color: ", ";\n  }\n\n  & .editor-toolbar > .active,\n  .editor-toolbar > button:hover,\n  .editor-preview pre,\n  .cm-s-easymde .cm-comment {\n    background-color: ", ";\n  }\n\n  & .editor-preview {\n    background-color: ", ";\n\n    & h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      font-size: revert;\n    }\n\n    & ul,\n    li {\n      list-style: revert;\n      padding: revert;\n    }\n\n    & a {\n      text-decoration: revert;\n    }\n  }\n"])), _ref => {
  let {
    theme
  } = _ref;
  return theme.sanity.color.card.enabled.fg;
}, _ref2 => {
  let {
    theme
  } = _ref2;
  return theme.sanity.color.card.enabled.border;
}, _ref3 => {
  let {
    theme
  } = _ref3;
  return theme.sanity.color.card.enabled.fg;
}, _ref4 => {
  let {
    theme
  } = _ref4;
  return theme.sanity.color.card.enabled.border;
}, _ref5 => {
  let {
    theme
  } = _ref5;
  return theme.sanity.color.selectable.primary.hovered.bg;
}, _ref6 => {
  let {
    theme
  } = _ref6;
  return theme.sanity.color.card.enabled.bg;
}, _ref7 => {
  let {
    theme
  } = _ref7;
  return theme.sanity.color.card.enabled.fg;
}, _ref8 => {
  let {
    theme
  } = _ref8;
  return theme.sanity.color.card.enabled.bg;
}, _ref9 => {
  let {
    theme
  } = _ref9;
  return theme.sanity.color.card.enabled.bg;
});
const SimpleMdeReact = react.lazy(() => import('react-simplemde-editor'));
function useSimpleMdeReact() {
  const [mounted, setMounted] = react.useState(false);
  react.useEffect(() => {
    requestAnimationFrame(() => setMounted(true));
  }, []);
  return mounted ? SimpleMdeReact : null;
}
const defaultMdeTools = ["heading", "bold", "italic", "|", "quote", "unordered-list", "ordered-list", "|", "link", "image", "code", "|", "preview", "side-by-side"];
function MarkdownInput(props) {
  var _a;
  const {
    value = "",
    onChange,
    elementProps: {
      onBlur,
      onFocus,
      ref
    },
    reactMdeProps: {
      options: mdeCustomOptions,
      ...reactMdeProps
    } = {},
    schemaType
  } = props;
  const client = sanity.useClient({
    apiVersion: "2022-01-01"
  });
  const {
    imageUrl
  } = (_a = schemaType.options) != null ? _a : {};
  const imageUpload = react.useCallback((file, onSuccess, onError) => {
    client.assets.upload("image", file).then(doc => onSuccess(imageUrl ? imageUrl(doc) : "".concat(doc.url, "?w=450"))).catch(e => {
      console.error(e);
      onError(e.message);
    });
  }, [client, imageUrl]);
  const mdeOptions = react.useMemo(() => {
    return {
      autofocus: false,
      spellChecker: false,
      sideBySideFullscreen: false,
      uploadImage: true,
      imageUploadFunction: imageUpload,
      toolbar: defaultMdeTools,
      status: false,
      ...mdeCustomOptions
    };
  }, [imageUpload, mdeCustomOptions]);
  const handleChange = react.useCallback(newValue => {
    onChange(sanity.PatchEvent.from(newValue ? sanity.set(newValue) : sanity.unset()));
  }, [onChange]);
  const SimpleMdeReact = useSimpleMdeReact();
  return /* @__PURE__ */jsxRuntime.jsx(MarkdownInputStyles, {
    children: SimpleMdeReact && /* @__PURE__ */jsxRuntime.jsx(react.Suspense, {
      fallback: /* @__PURE__ */jsxRuntime.jsx(ui.Box, {
        padding: 3,
        children: /* @__PURE__ */jsxRuntime.jsx(ui.Text, {
          children: "Loading editor..."
        })
      }),
      children: /* @__PURE__ */jsxRuntime.jsx(SimpleMdeReact, {
        ...reactMdeProps,
        ref,
        value,
        onChange: handleChange,
        onBlur,
        onFocus,
        options: mdeOptions,
        spellCheck: false
      })
    })
  });
}
const markdownTypeName = "markdown";
const markdownSchemaType = sanity.defineType({
  type: "string",
  name: markdownTypeName,
  title: "Markdown",
  components: {
    input: MarkdownInput
  }
});
const markdownSchema = sanity.definePlugin(config => {
  return {
    name: "markdown-editor",
    schema: {
      types: [config && config.input ? {
        ...markdownSchemaType,
        components: {
          input: config.input
        }
      } : markdownSchemaType]
    }
  };
});
exports.MarkdownInput = MarkdownInput;
exports.defaultMdeTools = defaultMdeTools;
exports.markdownSchema = markdownSchema;
exports.markdownSchemaType = markdownSchemaType;
//# sourceMappingURL=plugin-b7a179e6.js.map
