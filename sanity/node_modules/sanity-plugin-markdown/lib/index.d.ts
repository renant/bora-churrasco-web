/// <reference types="react" />

import {Options} from 'easymde'
import {Plugin as Plugin_2} from 'sanity'
import {ReactElement} from 'react'
import {SanityImageAssetDocument} from '@sanity/client'
import type {SimpleMDEReactProps} from 'react-simplemde-editor'
import {StringDefinition} from 'sanity'
import {StringInputProps} from 'sanity'

export declare const defaultMdeTools: Options['toolbar']

export declare interface MarkdownConfig {
  /**
   * When provided, will replace the default input component.
   *
   * Use this to customize MarkdownInput by wrapping it in a custom component,
   * and provide any custom props for https://github.com/RIP21/react-simplemde-editor#react-simplemde-easymde-markdown-editor
   * via the `reactMdeProps` prop.
   *
   * ### Example
   *
   * ```tsx
   * // CustomMarkdownInput.tsx
   * import { MarkdownInput, MarkdownInputProps } from 'sanity-plugin-markdown'
   *
   * export function CustomMarkdownInput(props) {
   *   const reactMdeProps: MarkdownInputProps['reactMdeProps'] =
   *     useMemo(() => {
   *       return {
   *         options: {
   *           toolbar: ['bold', 'italic'],
   *           // more options available, see:
   *           // https://github.com/Ionaru/easy-markdown-editor#options-list
   *         },
   *         // more props available, see:
   *         // https://github.com/RIP21/react-simplemde-editor#react-simplemde-easymde-markdown-editor
   *       }
   *     }, [])
   *
   *   return <MarkdownInput {...props} reactMdeProps={reactMdeProps} />
   * }
   *
   * // studio.config.ts
   * markdownSchema({input: CustomMarkdownInput})
   * ```
   */
  input?: (props: StringInputProps) => ReactElement
}

/**
 * @public
 */
export declare interface MarkdownDefinition
  extends Omit<StringDefinition, 'type' | 'fields' | 'options'> {
  type: typeof markdownTypeName
  options?: MarkdownOptions
}

export declare function MarkdownInput(props: MarkdownInputProps): JSX.Element

export declare interface MarkdownInputProps extends StringInputProps {
  /**
   * These are passed along directly to
   *
   * Note: MarkdownInput sets certain reactMdeProps.options by default.
   * These will be merged with any custom options.
   * */
  reactMdeProps?: Omit<SimpleMDEReactProps, 'value' | 'onChange'>
}

declare interface MarkdownOptions {
  /**
   * Used to create image url for any uploaded image.
   * The function will be invoked whenever an image is pasted or dragged into the
   * markdown editor, after upload completes.
   *
   * The default implementation uses
   * ```js
   * imageAsset => `${imageAsset.url}?w=450`
   * ```
   * ## Example
   * ```js
   * {
   *   imageUrl: imageAsset => `${imageAsset.url}?w=400&h=400`
   * }
   * ```
   * @param imageAsset
   */
  imageUrl?: (imageAsset: SanityImageAssetDocument) => string
}

export declare const markdownSchema: Plugin_2<void | MarkdownConfig>

export declare const markdownSchemaType: {
  type: 'string'
  name: 'markdown'
} & Omit<StringDefinition, 'preview'>

declare const markdownTypeName: 'markdown'

export {}

declare module '@sanity/types' {
  interface IntrinsicDefinitions {
    markdown: MarkdownDefinition
  }
}
